// Code generated by counterfeiter. DO NOT EDIT.
package dataprovider

import (
	"sync"

	aerospike "github.com/aerospike/aerospike-client-go/v6"
)

type FakeDataProvider struct {
	FetchUsersDetailsStub        func() (bool, []*aerospike.UserRoles, error)
	fetchUsersDetailsMutex       sync.RWMutex
	fetchUsersDetailsArgsForCall []struct {
	}
	fetchUsersDetailsReturns struct {
		result1 bool
		result2 []*aerospike.UserRoles
		result3 error
	}
	fetchUsersDetailsReturnsOnCall map[int]struct {
		result1 bool
		result2 []*aerospike.UserRoles
		result3 error
	}
	RequestInfoStub        func([]string) (map[string]string, error)
	requestInfoMutex       sync.RWMutex
	requestInfoArgsForCall []struct {
		arg1 []string
	}
	requestInfoReturns struct {
		result1 map[string]string
		result2 error
	}
	requestInfoReturnsOnCall map[int]struct {
		result1 map[string]string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDataProvider) FetchUsersDetails() (bool, []*aerospike.UserRoles, error) {
	fake.fetchUsersDetailsMutex.Lock()
	ret, specificReturn := fake.fetchUsersDetailsReturnsOnCall[len(fake.fetchUsersDetailsArgsForCall)]
	fake.fetchUsersDetailsArgsForCall = append(fake.fetchUsersDetailsArgsForCall, struct {
	}{})
	stub := fake.FetchUsersDetailsStub
	fakeReturns := fake.fetchUsersDetailsReturns
	fake.recordInvocation("FetchUsersDetails", []interface{}{})
	fake.fetchUsersDetailsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeDataProvider) FetchUsersDetailsCallCount() int {
	fake.fetchUsersDetailsMutex.RLock()
	defer fake.fetchUsersDetailsMutex.RUnlock()
	return len(fake.fetchUsersDetailsArgsForCall)
}

func (fake *FakeDataProvider) FetchUsersDetailsCalls(stub func() (bool, []*aerospike.UserRoles, error)) {
	fake.fetchUsersDetailsMutex.Lock()
	defer fake.fetchUsersDetailsMutex.Unlock()
	fake.FetchUsersDetailsStub = stub
}

func (fake *FakeDataProvider) FetchUsersDetailsReturns(result1 bool, result2 []*aerospike.UserRoles, result3 error) {
	fake.fetchUsersDetailsMutex.Lock()
	defer fake.fetchUsersDetailsMutex.Unlock()
	fake.FetchUsersDetailsStub = nil
	fake.fetchUsersDetailsReturns = struct {
		result1 bool
		result2 []*aerospike.UserRoles
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDataProvider) FetchUsersDetailsReturnsOnCall(i int, result1 bool, result2 []*aerospike.UserRoles, result3 error) {
	fake.fetchUsersDetailsMutex.Lock()
	defer fake.fetchUsersDetailsMutex.Unlock()
	fake.FetchUsersDetailsStub = nil
	if fake.fetchUsersDetailsReturnsOnCall == nil {
		fake.fetchUsersDetailsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 []*aerospike.UserRoles
			result3 error
		})
	}
	fake.fetchUsersDetailsReturnsOnCall[i] = struct {
		result1 bool
		result2 []*aerospike.UserRoles
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDataProvider) RequestInfo(arg1 []string) (map[string]string, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.requestInfoMutex.Lock()
	ret, specificReturn := fake.requestInfoReturnsOnCall[len(fake.requestInfoArgsForCall)]
	fake.requestInfoArgsForCall = append(fake.requestInfoArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.RequestInfoStub
	fakeReturns := fake.requestInfoReturns
	fake.recordInvocation("RequestInfo", []interface{}{arg1Copy})
	fake.requestInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDataProvider) RequestInfoCallCount() int {
	fake.requestInfoMutex.RLock()
	defer fake.requestInfoMutex.RUnlock()
	return len(fake.requestInfoArgsForCall)
}

func (fake *FakeDataProvider) RequestInfoCalls(stub func([]string) (map[string]string, error)) {
	fake.requestInfoMutex.Lock()
	defer fake.requestInfoMutex.Unlock()
	fake.RequestInfoStub = stub
}

func (fake *FakeDataProvider) RequestInfoArgsForCall(i int) []string {
	fake.requestInfoMutex.RLock()
	defer fake.requestInfoMutex.RUnlock()
	argsForCall := fake.requestInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDataProvider) RequestInfoReturns(result1 map[string]string, result2 error) {
	fake.requestInfoMutex.Lock()
	defer fake.requestInfoMutex.Unlock()
	fake.RequestInfoStub = nil
	fake.requestInfoReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeDataProvider) RequestInfoReturnsOnCall(i int, result1 map[string]string, result2 error) {
	fake.requestInfoMutex.Lock()
	defer fake.requestInfoMutex.Unlock()
	fake.RequestInfoStub = nil
	if fake.requestInfoReturnsOnCall == nil {
		fake.requestInfoReturnsOnCall = make(map[int]struct {
			result1 map[string]string
			result2 error
		})
	}
	fake.requestInfoReturnsOnCall[i] = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeDataProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchUsersDetailsMutex.RLock()
	defer fake.fetchUsersDetailsMutex.RUnlock()
	fake.requestInfoMutex.RLock()
	defer fake.requestInfoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDataProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ DataProvider = new(FakeDataProvider)
