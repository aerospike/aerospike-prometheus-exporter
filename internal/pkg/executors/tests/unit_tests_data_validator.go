package executors

import (
	"bufio"
	"fmt"
	"os"
	"strings"

	"github.com/aerospike/aerospike-prometheus-exporter/internal/pkg/commons"
)

/*
Dummy Raw Metrics, copied from local Aerospike Server
returns static test data copied from running an Aerospike Server with test namespaces, sets, sindex, jobs, latencies etc.,
we need to update this data for each release to reflect the new metrics, contexts etc.,
this data is passed to the watcher and expected output is also generated
once we have output from watcher-implementations ( like watcher_namespaces.go, watcher_node_stats.go)

	this output is compated with the expected results generated by Test-Cases
*/

var TEST_PROM_DATA_FILE = "tests_data/default_prom_mock_results.txt"

// read mock test data from a file
var Is_Unittests_Initialized = 0

type UnittestDataValidator interface {
	Initialize(data []string)
	GetPassOneKeys() map[string]string
	GetPassTwoKeys() map[string]string
	GetMetricLabelsWithValues() map[string]string
}

type UnittestDataHandler struct {
}

func (md *UnittestDataHandler) Initialize() {

	fmt.Println("Unittest Initializing ....: ")

	// Mark as initialized
	Is_Unittests_Initialized = 1

	// load expected test data from mock files
	md.loadPrometheusData()
}

var (
	prom_validator = &PrometheusUnittestValidator{}
)
var validators = map[string]UnittestDataValidator{
	"prometheus": prom_validator,
}

func (md *UnittestDataHandler) GetUnittestValidator(key string) UnittestDataValidator {
	md.Initialize()

	return validators[key]
}

// Internal helper functions
func (md *UnittestDataHandler) loadPrometheusData() {
	filePath := commons.GetPromMockResultsFile(TEST_PROM_DATA_FILE)

	// cwd, _ := os.Getwd()
	// fileLocation := cwd + "/" + filePath
	readFile, err := os.Open(filePath)

	if err != nil {
		fmt.Println(err)
	}

	fileScanner := bufio.NewScanner(readFile)
	fileScanner.Split(bufio.ScanLines)
	var fileLines []string

	for fileScanner.Scan() {
		fileLines = append(fileLines, strings.TrimSpace(fileScanner.Text()))
	}

	readFile.Close()

	// Initialize prom_validator data
	prom_validator.Initialize(fileLines)

	fmt.Println("loadPrometheusData(): Completed loading test Prometheus Expected Data ")

}

// Start Prometheus
type PrometheusUnittestValidator struct {
	PassOneOutputs []string
	PassTwoOutputs []string
	Metrics        []string
}

func (unp PrometheusUnittestValidator) Initialize(data []string) {
	for _, line := range data {
		if len(line) > 0 && strings.HasPrefix(line, "aerospike_") {
			prom_validator.Metrics = append(prom_validator.Metrics, strings.TrimSpace(line))
		}
	}

}

func (unp PrometheusUnittestValidator) GetPassOneKeys() map[string]string {
	return nil
}

func (unp PrometheusUnittestValidator) GetPassTwoKeys() map[string]string {

	return nil
}

func (unp PrometheusUnittestValidator) GetMetricLabelsWithValues() map[string]string {
	var outputs = make(map[string]string)
	for k := range unp.Metrics {
		outputs[unp.Metrics[k]] = unp.Metrics[k]
	}

	return outputs
}

// End Prometheus
